# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    text_font_family: 'Orbitron'

    black_color:                  [0.000,0.000,0.750]
    dark_color:                   [0.000,0.000,0.700]
    mid_color:                    [0.000,0.000,0.650]
    midlight_color:               [0.000,0.000,0.600]
    extralight_color:             [0.000,0.000,0.550]
    light_color:                  [0.000,0.000,0.500]
    lighter_color:                [0.000,0.000,0.450]
    lightest_color:               [0.000,0.000,0.420]
    ultralight_color:             [0.000,0.000,0.390]
    offwhite_color:               [0.000,0.000,0.350]
    white_color:                  [0.000,0.000,0.330]

    roads_text_fill:              [0.000,0.000,1.000]
    roads_text_stroke:            [0.000,0.000,0.000]

    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }

    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff

    Aldrich:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/aldrich/v6/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff
          url: fonts/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff


scene:
    background:
        color: [0.000,0.000,0.000]

sources:
    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 15

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: grid-gradient-earth
                order: global.feature_order
                color: [0.925,0.925,0.925]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                style: grid-gradient-water
                order: global.feature_order


        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
            draw:
                polygons:
                    style: grid-gradient-water

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    style: grid-gradient-water

    landuse:
        data: { source: mapzen }
        enabled: true
        draw:
            polygons:
                order: global.feature_order
                visible: false
        # tier1:
        national_park:
            filter:
                all:
                    - kind: [national_park, battlefield, protected_area]
                any:
                    - not: { operator: [ "United States Forest Service" ] }
                    - protect_class: ['2','3','5']
            draw:
                polygons:
                    style: grid-gradient-green
                    visible: true
            us_national_park:
                # yosemite national park, death valley national park, grand canyon national park
                filter:
                    any:
                        - operator: [ "United States National Park Service" ]
                        - protect_class: ['2','3','5']
                draw:
                    polygons:
                        style: grid-gradient-green
                        visible: true

        conservation:
            filter:
                $zoom: { min: 4 }
                kind: [protected_area, nature_reserve, national_park]
                not: { protect_class: ['2','3','5']}
            draw:
                polygons:
                    style: grid-gradient-conservation
                    visible: true

        national_forest_level_6:
            filter:
                all:
                    - kind: forest
                any:
                    - protect_class: ['6']
                    - operator: ['United States Forest Service']
            draw:
                polygons:
                    style: grid-gradient-forest
                    visible: true
        
        forest-landcover:
            filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
            draw:
                polygons:
                    style: grid-gradient-forestlandcover
                    visible: true

        parks-and-national-forests-not-national-park:
            filter:
                all:
                    - $zoom: { min: 4 }
                    - kind: [park, national_park]
                any:
                    - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
                    - not: { protect_class: ['2','3','5','6'] }
            # default for national forests and more?
            draw:
                polygons:
                    style: grid-gradient-parks
                    color: [0.960,0.960,0.960]
                    visible: true
            national_park:
                #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
                filter:
                    all:
                        - kind: national_park
                        - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
                draw:
                    polygons:
                        visible: true

        pitch:
            filter: { kind: pitch }
            draw:
                polygons:
                    style: grid-gradient-pitch
                    visible: true

        # farm:
        #     filter:
        #         kind: [farm, farmland]
        #         $zoom: { min: 10}
        #     draw:
        #         polygons:
        #             style: grid-gradient-farm
        #             color: global.light_color
        #             visible: true

        university:
            filter:
                kind: [university, college]
            draw:
                polygons:
                    style: grid-gradient-university
                    visible: true

        garden:
            filter:
                kind: garden
            draw:
                polygons:
                    style: grid-gradient-garden
                    visible: true

        playground:
            filter:
                kind: playground
            draw:
                polygons:
                    style: grid-gradient-playground
                    visible: true

        beach:
            filter:
                kind: beach
            draw:
                polygons:
                    style: grid-gradient-beach
                    visible: true

        golf_course:
            filter:
                kind: golf_course
            draw:
                polygons:
                    style: grid-gradient-golf
                    visible: true

        hospital:
            filter:
                kind: hospital
            draw:
                polygons:
                    style: grid-gradient-hospital
                    visible: true

        recreation_ground:
            filter:
                kind: recreation_ground
            draw:
                polygons:
                    style: grid-gradient-recreation
                    visible: true

        pedestrian:
            filter:
                kind: [pedestrian,common,footway]
            draw:
                polygons:
                    style: grid-gradient-pedestrian
                    visible: true
            # green-stuff:
            #     filter:
            #         surface: [grass]
            #     draw:
            #         polygons:
            #             style: dots
            #             color: global.lighter_color

    roads:
        data: { source: mapzen, layer: roads }
        enabled: true
        draw:
            lines:
                visible: true
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    #cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    style: lines-pixelate
                    color: [0.500,0.367,0.315]
                    width: [[5, 0.5px], [7, 0.75px]]
                    outline:
                        color: [0.000,0.000,0.000]
                        width: [[9, 0px], [10, 0px], [12, 1px]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [0.500,0.367,0.315]
                        width: [[5, 0.25px], [7, 0.5px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: [0.410,0.260,0.201]
                        width: 0.5px
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false
        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    # style: lines-datastream
                    style: lines-pixelate
                    color: [0.410,0.260,0.201]
                    width: [[8, 1px], [14, 2px], [17, 8px], [18, 10m]]
                    outline:
                        color: [0.000,0.000,0.000]
                        width: [[8, 0px], [12, 1px], [15, 2px], [19, 6px]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        style: lines-pixelate
                        color: [0.410,0.260,0.201]
                        width: [[9, 0px], [13, 0.75px], [17, 4px], [18, 5m]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[9, 0px], [12, 0.5px], [17, 1.5px], [18, 2px]]
                early_link:
                    filter: { $zoom: {min: 13, max: 15} }
                    draw:
                        lines:
                            order: 352
                # tunnel-link:
                #     filter: {is_tunnel: true, $zoom: { min: 13 } }
                #     draw:
                #         lines:
                #             color: [[13, global.light_color], [14, global.ultralight_color]]
                #             outline:
                #                 color: [[12, global.white_color], [13, global.light_color]]
            # tunnel:
            #     filter: { is_tunnel: true, $zoom: { min: 13 } }
            #     draw:
            #         lines:
            #             color: [[13, global.light_color], [14, global.ultralight_color]]
            #             outline:
            #                 color: [[12, global.white_color], [13, global.light_color]]
            highway_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    style: lines-pixelate
                    color: [[8,[0.410,0.260,0.201]], [13,[0.220,0.207,0.202]]]
                    width: [[13, 0.5px], [15, 1px], [17, 4px]]
                    outline:
                        color: [0.000,0.000,0.000]
                        width: [[12, 0px], [13, 0.5px], [15, 1px], [17, 2px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[8,[0.410,0.260,0.201]], [13,[0.220,0.207,0.202]]]
                        width: [[8, 0.5px], [11, 0.5px], [13, 1px], [17, 4px], [18, 7m]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[8, 0px], [13, 0px], [14, 1px], [17, 2px], [18, 4px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            style: lines-pixelate
                            color: [0.410,0.260,0.201]
                            width: [[9, 0.5px], [13, 1px], [16, 3px], [17, 8px], [18, 10m]]
                            outline:
                                color: [0.000,0.000,0.000]
                                width: [[8, 0px], [13, 0px], [14, 0.75px], [15, 1.5px], [17, 3px], [18, 4px]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    # tunnel:
                    #     filter: { is_tunnel: true, $zoom: { min: 13 } }
                    #     draw:
                    #         lines:
                    #             color: [[13, global.light_color], [14, global.ultralight_color]]
                    #             outline:
                    #                 color: [[12, global.white_color], [13, global.light_color]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        width: [[10, 0.5px], [12, 0.5px], [15, 1px], [17, 2.5px]]
                        outline:
                            width: [[10, 0px], [15, 0px], [16, 1px], [18, 2px]]
            # tunnel:
            #     filter: { is_tunnel: true, $zoom: { min: 13 } }
            #     draw:
            #         lines:
            #             color: [[13, global.light_color], [14, global.ultralight_color]]
            #             outline:
            #                 color: [[12, global.white_color], [13, global.light_color]]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        # color: red
                        color: [[10,[0.410,0.260,0.201]], [13,[0.220,0.207,0.202]]]
                        width: [[10, 0.5px], [12, 0.5px], [16, 1.5px], [17, 4px], [18, 7m]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[10, 0px], [14, 1px], [17, 2px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: 353 #function() { return feature.sort_rank + 2; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[10,[0.410,0.260,0.201]], [13,[0.220,0.207,0.202]]]
                            width: [[10, 0.5px], [12, 0.5px], [16, 1.5px], [17, 4px], [18, 7m]]
                            outline:
                                color: [0.000,0.000,0.000]
                                width: [[10, 0px], [14, 1px], [17, 2px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                #     tunnel:
                #         filter: {is_tunnel: true, $zoom: { min: 13 } }
                #         draw:
                #             lines:
                #                 color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                #                 outline:
                #                     color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        # color: red
                        color: [[11,[0.410,0.260,0.201]], [13,[0.220,0.207,0.202]]]
                        width: [[11, 0.5px], [15, 1.25px], [17, 2.5px], [18, 5m]]
                        outline:
                            color: [0.000,0.000,0.000]
                            width: [[11, 0px], [14, 0.5px], [17, 2px]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[11,[0.410,0.260,0.201]], [13,[0.220,0.207,0.202]]]
                            width: [[11, 0.5px], [15, 1.25px], [17, 2px], [18, 5m]]
                            outline:
                                color: [0.000,0.000,0.000]
                                width: [[11, 0px], [14, 0.5px], [17, 2px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                #     tunnel:
                #         filter: { is_tunnel: true, $zoom: { min: 13 } }
                #         draw:
                #             lines:
                #                 color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                #                 outline:
                #                     color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
                # link:
                #     filter: { is_link: true } # on- and off-ramps, etc
                #     draw:
                #         lines:
                #             color: [[14, global.light_color], [15, global.dark_color], [16, global.white_color]]
                #             width: [[11, 0.0px], [15, 0.5px], [16, 0.1px], [18, 4.5m]]
                #             outline:
                #                 color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                #                 width: [[11, 0px], [14, 0px], [16, 0.25px], [18, 2px]]

        # minor_road:
        #     filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
        #     draw:
        #         lines:
        #             color: [[11, global.ultralight_color], [14, global.mid_color], [16, global.white_color]]
        #             width: [[11, 0.35px], [13, 0.5px], [14, 1px], [15, 1px], [16, 0.1px], [17, 4px], [18, 9m]]
        #             outline:
        #                 color: [[15, global.mid_color], [17, global.black_color]]
        #                 width: [[11, 0px], [15, 0px], [16, 0.75px], [17, 1.5px], [18, 1.5px]]
        #     early:
        #         filter: { $zoom: { max: 16 } }
        #         draw:
        #             lines:
        #                 order: 350
        #                 outline:
        #                     order: 351
        #     # Is this junk code?
        #     round:
        #         filter: { $zoom: { min: 17 } }
        #         draw:
        #             lines:
        #                 cap: round
        #                 join: round

        #     tunnel:
        #         filter: {is_tunnel: true, $zoom: { min: 13 } }
        #         draw:
        #             lines:
        #                 color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
        #                 outline:
        #                     color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
        #     minor_road_bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 cap: round
        #                 outline:
        #                     cap: butt
        #     labels-minor_road:
        #         filter: { $zoom: { min: 16 } }
        #         draw:
        #             text-blend-order:
        #                 priority: 59
        #                 visible: true
        #                 text_source: name
        #                 font:
        #                     size: [[15,10px],[18,14px]]
        #                     stroke: { color: global.roads_text_stroke, width: 4px }
        # service_road:
        #     filter: { kind: minor_road, kind_detail: service, $zoom: { min: 13 } }
        #     draw:
        #         lines:
        #             color: [[13, global.offwhite_color], [15, global.midlight_color], [16, global.white_color]]
        #             width: [[13, 0px], [15, 0.75px], [16, 0.1px], [17, 2.5px], [18, 5m]]
        #             outline:
        #                 color: [[13, global.white_color], [14, global.white_color], [15, global.mid_color], [18, global.black_color]]
        #                 width: [[13, 0px], [15, 0px], [16, 0.6px], [19, 1.5px]]
        #     labels-service_road:
        #         filter: { $zoom: { min: 17 } }
        #         draw:
        #             text-blend-order:
        #                 priority: 60
        #                 visible: true
        #                 text_source: name
        #                 font:
        #                     size: [[15,10px], [18,14px]]
        #                     stroke: { color: global.roads_text_stroke, width: 4px }

        # path:
        #     filter:
        #         all:
        #             - kind: [path, portage_way]
        #         not:
        #             - kind_detail: [steps, track, pier]
        #     draw:
        #         lines:
        #             color: global.dark_color
        #             width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
        #     early:
        #         filter:
        #             $zoom: { max: 15 }
        #         draw:
        #             lines:
        #                 order: 351
        #                 outline:
        #                     order: 350
        #     pedestrian:
        #         filter: { kind_detail: pedestrian }
        #         draw:
        #             lines:
        #                 color: global.dark_color
        #                 width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
        #     footway:
        #         filter: { kind_detail: footway }
        #         draw:
        #             lines:
        #                 color: global.dark_color
        #                 width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
        #         bridge:
        #             filter: { is_bridge: true }
        #             draw:
        #                 lines:
        #                     cap: round
        #                     outline:
        #                         color: [[13, global.light_color], [15, global.mid_color]]
        #                         cap: butt
        #     bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 cap: round
        #                 outline:
        #                     color: global.mid_color
        #                     cap: butt
        #     labels-path:
        #         filter: { $zoom: { min: 18 } }
        #         draw:
        #             text-blend-order:
        #                 priority: 61
        #                 visible: true
        #                 text_source: name
        #                 font:
        #                     size: 11px
        #                     stroke: { color: global.roads_text_stroke, width: 4px }
        # track:
        #     filter: { kind: path, kind_detail: track }
        #     draw:
        #         lines:
        #             color: global.dark_color
        #             width: [[13, 0px], [16, 0.15px], [17, 2.5px], [20, 4m]]
        #     bridge:
        #         filter: { is_bridge: true }
        #         draw:
        #             lines:
        #                 cap: butt
        #                 color: global.white_color
        #                 outline:
        #                     color: [[13, global.light_color], [15, global.black_color]]
        #                     cap: butt

        #     labels-track:
        #         filter: { $zoom: { min: 18 } }
        #         draw:
        #             text-blend-order:
        #                 priority: 61
        #                 visible: true
        #                 text_source: name
        #                 font:
        #                     size: 11px
        #                     stroke: { color: global.roads_text_stroke, width: 4px }

        # steps:
        #     filter:
        #         all:
        #             - kind: path
        #             - kind_detail: steps
        #     draw:
        #         lines:
        #             dash: [0.75, 0.25]
        #             dash_background_color: global.dark_color
        #             order: global.feature_order
        #             color: [[15, global.light_color], [19, global.lightest_color]]
        #             width: [[15, 0.5px], [18, 3px], [19, 1.5m]]
        #     labels-steps:
        #         filter: { $zoom: { min: 18 } }
        #         draw:
        #             text-blend-order:
        #                 priority: 62
        #                 visible: true
        #                 text_source: name
        #                 font:
        #                     size: 11px
        #                     stroke: { color: global.roads_text_stroke, width: 4px }

    buildings:
        data: { source: mapzen, layer: buildings }
        enabled: true
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: 329
                color: [0.925,0.925,0.925]

        footprints:
            draw:
                polygons:
                    visible: true
                    style: grid-gradient-buildings

        in_university:
            filter: { landuse_kind: [university,school] }
            draw:
                polygons:
                    visible: true
                    style: grid-gradient-university-bldgs

        in_hosptal:
            filter: { landuse_kind: hospital }
            draw:
                polygons:
                    visible: true
                    style: grid-gradient-hospital-bldgs

        in_retail:
            filter: { landuse_kind: retail }
            draw:
                polygons:
                    visible: true
                    style: grid-gradient-retail-bldgs

        in_park:
            filter:
                landuse_kind: [park,forest,nature_reserve,conservation,golf_course,garden]
            draw:
                polygons:
                    visible: true
                    style: grid-gradient-parks-bldgs

    boundaries:
        data: { source: mapzen, layer: boundaries }
        enabled: false
        # country subdivisions (states, provinces)
        draw:
            lines:
                order: global.feature_order
        country:
            filter:
                any:
                    - kind: country
                    - admin_level: 2
            draw:
                country-outerline:
                    style: lines
                    order: function() { return (feature.sort_rank -1); }
                    color: global.black_color
                    width: [[0, 0px], [4, 2px], [8, 6px], [14, 8px], [17, 16m]]
                lines:
                    color: global.offwhite_color
                    width: [[0, 0px], [5, 0px], [6, 1px], [14, 15px]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    country-outerline:
                        visible: false
                    lines:
                        visible: false
            # country-labels:
            #     filter: { name: true, $zoom: { min: 8 }, not: { maritime_boundary: true } }
            #     draw:
            #         text-blend-order:
            #             priority: 2
            #             visible: global.text_visible_admin
            #             text_source: global.ux_language_text_source_boundary_lines_left_right
            #             offset: [[8, [0, 7px]], [11, [0, 8px]], [12, [0, 9px]]]
            #             text_wrap: 100
            #             font:
            #                 family: global.text_font_family
            #                 size: 10px
            #                 fill: global.black_color
            #                 transform: uppercase
            #     no-left-right:
            #         filter: { "name:left": false, "name:right": false }
            #         draw:
            #             text-blend-order:
            #                 text_source: global.ux_language_text_source_boundary_lines
            #                 offset: 0px

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                lines:
                    dash: [1.25, 1.25]
                    order: global.feature_order
                    color: global.black_color
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    lines:
                        dash: [2.0, 1.0]
                        order: global.feature_order
                        # style: lines-dots
                        color: global.black_color
                        width: [[1, 1px], [9, 4px], [17,14m]]

        region:
            filter:
                any:
                    - kind: [region,macroregion]
                    - kind_detail: [3,4]
            draw:
                lines:
                    color: global.black_color
                    # width: [[0, 0.5px], [9, 2px], [14, 4px], [16, 6.5px], [17, 16m]]
                    width: [[0, 0.5px], [14, 2px], [16, 7px], [17, 17m]]

            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false

            dash-borders:
                filter:
                    $zoom: { min: 7 }
                draw:
                    lines:
                        dash: [7.0, 3.0]

            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false

        #     region-labels:
        #         filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
        #         draw:
        #             text-blend-order:
        #                 priority: 3
        #                 visible: global.text_visible_admin
        #                 text_source: global.ux_language_text_source_boundary_lines_left_right
        #                 offset: [[8,[0, 5px]], [11, [0, 6px]], [12,[0, 7px]]]
        #                 text_wrap: 100
        #                 # offset: [0px, 10px]
        #                 # anchor: top
        #                 font:
        #                     family: global.text_font_family
        #                     size: 9px
        #                     fill: global.mid_color
        #                     transform: uppercase
        #         no-left-right:
        #             filter: { "name:left": false, "name:right": false }
        #             draw:
        #                 text-blend-order:
        #                     text_source: global.ux_language_text_source_boundary_lines
        #                     offset: 0px

    places:
        data: { source: mapzen, layer: places }
        enabled: true
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.620,0.591,0.496]
            # END NOTE

        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [0.000,0.000,0.000], width: 5px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

        # neighbourhoods:
        #     filter:
        #         all:
        #             - kind:
        #                 - borough
        #                 - macrohood
        #                 - neighbourhood
        #                 #- microhood       # until Tenderloin microhoods are cleaned up, ban this placetype
        #             - $zoom: { min: 10, max: 17 }
        #             - is_landuse_aoi: false
        #             - function() { return (feature.min_zoom <= ($zoom+0.5) && feature.max_zoom >= ($zoom+1)) }
        #     draw:
        #         text-blend-order:
        #             visible: true
        #             priority: 29
        #             buffer: 8px
        #             text_wrap: 10
        #             max_lines: 2
        #             font:
        #                 fill: [0.350,0.000,1.000]
        #                 size: [[11, 9px], [12, 10px], [13, 12px], [14, 16px], [16, 24px]]
        #                 weight: normal
        #                 transform: uppercase
        #                 stroke: { color: [0.000,0.000,0.000], width: [[12, 4px], [13, 6px], [15, 8px]] }

        #     z13-up:
        #         filter:
        #             $zoom: { min: 13 }
        #         draw:
        #             text-blend-order:
        #                 font:
        #                     weight: 300

        #         low_quality_kind_tile_rank:
        #             filter:
        #                 kind_tile_rank: { min: 8 }
        #             draw:
        #                 text-blend-order:
        #                     visible: false

        #         z14-up:
        #             filter:
        #                 $zoom: { min: 14 }
        #             draw:
        #                 text-blend-order:
        #                     text_wrap: 9
        #                     visible: true

        #             z15-up:
        #                 filter:
        #                     $zoom: { min: 15 }
        #                     min_zoom: { min: 15 }
        #                 draw:
        #                     text-blend-order:
        #                         priority: 19
        #                         font:
        #                             size: 13px

styles:
    text-blend-order:
        base: text
        blend_order: 1

    polygons_transparent:
        base: polygons
        blend: overlay

    earth-pixelate:
        base: polygons
        mix: [polygons-pixelate]
        shaders:
            defines:
                PIXELATE_SCALE: 30.
                PIXELATE_COLOR: color.rgb*.96
                PIXELATE_BACKGROUND_COLOR: color.rgb

    grid-gradient-earth:
        base: polygons
        mix: [4grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.000,0.000] # lower-left
                    - [0.000,0.000,0.000] # lower-right
                    - [0.140,0.114,0.101]
                    # - [0.190,0.143,0.120]
                    # - [0.270,0.178,0.132] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-water:
        base: polygons
        mix: [4grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.000,0.000] # lower-left
                    - [0.000,0.514,0.670]
                    # - [0.050,0.040,0.600] # lower-right
                    - [0.000,0.000,0.000] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-buildings:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.100,0.066,0.049] # lower-left
                    - [0.100,0.066,0.049] # lower-right
                    - [0.100,0.066,0.049] # upper-left
                    - [0.460,0.427,0.414]
                    # - [0.410,0.260,0.201] # upper-right

    grid-gradient-green:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.000,0.000] # lower-left
                    - [0.000,0.000,0.000] # lower-right
                    - [0.000,0.440,0.411] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-conservation:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.000,0.000] # lower-left
                    - [0.000,0.243,0.260] # lower-right
                    - [0.000,0.000,0.000] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-forest:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.000,0.000] # lower-left
                    - [0.000,0.000,0.000] # lower-right
                    - [0.171,0.300,0.259] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-forestlandcover:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.000,0.000] # lower-left
                    - [0.000,0.000,0.000] # lower-right
                    - [0.000,0.320,0.256] # upper-left
                    - [0.000,0.000,0.000] # upper-right

    grid-gradient-parks:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.050,0.033,0.025] # lower-left
                    - [0.050,0.033,0.025] # lower-right
                    - [0.000,0.342,0.380] # upper-left
                    - [0.050,0.033,0.025] # upper-right

    # grid-gradient-garden:
    #     base: polygons
    #     mix: [32grid-gradient]
    #     shaders:
    #         uniforms:
    #             u_colors:
    #                 - [0.050,0.033,0.025] # lower-left
    #                 - [0.036,0.510,0.455] # lower-right
    #                 - [0.050,0.033,0.025] # upper-left
    #                 - [0.050,0.033,0.025] # upper-right

    grid-gradient-garden:
        base: polygons
        mix: [32grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.168,0.180] # lower-left
                    - [0.000,0.025,0.030] # lower-right
                    - [0.000,0.168,0.180] # upper-left
                    - [0.000,0.168,0.180] # upper-right

    grid-gradient-playground:
        base: polygons
        mix: [32grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.068,0.074,0.250] # lower-left
                    - [0.590,0.100,0.288] # lower-right
                    - [0.068,0.074,0.250] # upper-left
                    - [0.068,0.074,0.250] # upper-right

    grid-gradient-pitch:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.063,0.080] # lower-left
                    - [0.000,0.440,0.352] # lower-right
                    - [0.000,0.063,0.080] # upper-left
                    - [0.000,0.063,0.080] # upper-right

    grid-gradient-farm:
        base: polygons
        mix: [grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.828,0.860,0.714] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.920,0.920,0.920] # upper-left
                    - [0.952,0.952,0.952] # upper-right

    grid-gradient-university:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.050,0.033,0.025] # lower-left
                    - [0.150,0.163,0.230] # lower-right
                    - [0.050,0.033,0.025] # upper-left
                    - [0.050,0.033,0.025] # upper-right

    grid-gradient-hospital:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.050,0.033,0.025] # lower-left
                    - [0.240,0.151,0.207] # lower-right
                    - [0.050,0.033,0.025] # upper-left
                    - [0.050,0.033,0.025] # upper-right

    grid-gradient-recreation:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.095,0.170,0.180] # lower-left
                    - [0.000,0.023,0.040] # lower-right
                    - [0.095,0.170,0.180] # upper-left
                    - [0.095,0.170,0.180] # upper-right

    grid-gradient-pedestrian:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.050,0.050,0.050] # lower-left
                    - [0.330,0.330,0.330] # lower-right
                    - [0.050,0.050,0.050] # upper-left
                    - [0.050,0.050,0.050] # upper-right

    grid-gradient-beach:
        base: polygons
        mix: [8grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.050,0.033,0.025] # lower-left
                    - [0.490,0.484,0.309] # lower-right
                    - [0.050,0.033,0.025] # upper-left
                    - [0.050,0.033,0.025] # upper-right

    grid-gradient-golf:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.000,0.081,0.090] # lower-left
                    - [0.000,0.320,0.293] # lower-right
                    - [0.000,0.081,0.090] # upper-left
                    - [0.000,0.081,0.090] # upper-right

    grid-gradient-university-bldgs:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.100,0.066,0.049] # lower-left
                    - [0.100,0.066,0.049] # lower-right
                    - [0.100,0.066,0.049] # upper-left
                    - [0.226,0.209,0.550] # upper-right

    grid-gradient-hospital-bldgs:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.100,0.066,0.049] # lower-left
                    - [0.100,0.066,0.049] # lower-right
                    - [0.100,0.066,0.049] # upper-left
                    - [0.590,0.100,0.329] # upper-right

    grid-gradient-retail-bldgs:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.100,0.066,0.049] # lower-left
                    - [0.100,0.066,0.049] # lower-right
                    - [0.100,0.066,0.049] # upper-left
                    - [0.510,0.215,0.107] # upper-right

    grid-gradient-parks-bldgs:
        base: polygons
        mix: [16grid-gradient]
        shaders:
            uniforms:
                u_colors:
                    - [0.100,0.066,0.049] # lower-left
                    - [0.100,0.066,0.049] # lower-right
                    - [0.100,0.066,0.049] # upper-left
                    - [0.485,0.520,0.343] # upper-right

    4grid-gradient:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.870,0.870,0.870] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.680,0.569,0.544] # upper-left
                    - [0.902,0.902,0.902] # upper-right
                u_grid_size: 4
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x),
                        mix(u_colors[2], u_colors[3], f_st.x),
                        f_st.y
                    );

    8grid-gradient:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.870,0.870,0.870] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.680,0.569,0.544] # upper-left
                    - [0.902,0.902,0.902] # upper-right
                u_grid_size: 8
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x),
                        mix(u_colors[2], u_colors[3], f_st.x),
                        f_st.y
                    );

    16grid-gradient:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.870,0.870,0.870] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.680,0.569,0.544] # upper-left
                    - [0.902,0.902,0.902] # upper-right
                u_grid_size: 16
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x),
                        mix(u_colors[2], u_colors[3], f_st.x),
                        f_st.y
                    );

    32grid-gradient:
        base: polygons
        mix: [space-tile]
        shaders:
            uniforms:
                u_colors:
                    - [0.870,0.870,0.870] # lower-left
                    - [0.890,0.890,0.890] # lower-right
                    - [0.680,0.569,0.544] # upper-left
                    - [0.902,0.902,0.902] # upper-right
                u_grid_size: 32
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    vec2 f_st = fract(st * u_grid_size);
                    color.rgb = mix(
                        mix(u_colors[0], u_colors[1], f_st.x),
                        mix(u_colors[2], u_colors[3], f_st.x),
                        f_st.y
                    );

    lines-pixelate:
        base: lines
        mix: [space-tile, generative-random]
        shaders:
            defines:
                PIXELATE_SCALE: 10.
                PIXELATE_COLOR: color.rgb*.37
                PIXELATE_BACKGROUND_COLOR: color.rgb
            blocks:
                color: |
                    color.rgb = mix(PIXELATE_BACKGROUND_COLOR,
                                    PIXELATE_COLOR,
                                    random(floor(getTileCoords()*PIXELATE_SCALE)));

    polygons-pixelate:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply a random pixelated pattern to the polygon style. To learn more about patterns or random check [this chapter](https://thebookofshaders.com/09/) or  [this other chapter from the Book of Shaders](https://thebookofshaders.com/10/)
        ui:
            shaders:
                defines:
                    PIXELATE_SCALE:
                        type: number
                        label: Scale
                        range:
                            min: 1.
                            max: 1000.
                            step: 1.
                    PIXELATE_COLOR:
                        type: color
                        label: Color
                    PIXELATE_BACKGROUND_COLOR:
                        type: color
                        label: 'Background color'

        base: polygons
        mix: [space-tile, generative-random]
        shaders:
            defines:
                PIXELATE_SCALE: 60.
                PIXELATE_COLOR: color.rgb*.85
                PIXELATE_BACKGROUND_COLOR: color.rgb
            blocks:
                color: |
                    color.rgb = mix(PIXELATE_BACKGROUND_COLOR,
                                    PIXELATE_COLOR,
                                    random(floor(getTileCoords()*PIXELATE_SCALE)));

    generative-random:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Set of functions about random.
                For more information on this theme read [this chapter of The Book of Shaders about Random](http://thebookofshaders.com/10/).
        test:
            random_float: { blocks: { color: "    color.rgb += random(v_texcoord.x*2.);" } }
            random_vec2: { blocks: { color: "    color.rgb += random(v_texcoord.xy*2.);" } }
            random_vec3: { blocks: { color: "    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));" } }
            random2_vec2: { blocks: { color: "    color.rg += random2(v_texcoord.xy*2.);" } }
            random3_vec2: { blocks: { color: "    color.rgb += random3(v_texcoord.xy*2.);" } }
            random3_vec3: { blocks: { color: "    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));" } }
            random_float_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(v_texcoord.x*2.);" } }
            random_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(v_texcoord.xy*2.);" } }
            random_vec3_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random(vec3(v_texcoord.xy*2.,u_time));" } }
            random2_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rg += random2(v_texcoord.xy*2.);" } }
            random3_vec2_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random3(v_texcoord.xy*2.);" } }
            random3_vec3_t: { defines: { RANDOM_TEXSAMPLE: 1 }, blocks: { color: "    color.rgb += random3(vec3(v_texcoord.xy*2.,u_time));" } }

        shaders:
            uniforms:
                u_random: https://tangrams.github.io/blocks/generative/imgs/tex16.png
            blocks:
                global: |
                    vec3 random3 (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return texture2D(u_random,fract(p*2.),-100.).rgb;
                        #else
                        return fract(sin(vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,vec2(419.2,371.9)) ))*43758.5453);
                        #endif
                    }
                    vec3 random3 (vec3 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        vec2 uv = fract(p.xy+vec2(37.0,17.0)*p.z);
                        return texture2D(u_random, fract(uv*2.), -100.0).rgb;
                        #else
                        float j = 4096.0*sin(dot(p,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                        #endif
                    }
                    vec2 random2 (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).rg;
                        #else
                        return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
                        #endif
                    }
                    float random (float x) {
                        return fract(sin(x)*43758.5453);
                    }
                    float random (vec2 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).r;
                        #else
                        return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));
                        #endif
                    }
                    float random (vec3 p) {
                        #ifdef RANDOM_TEXSAMPLE
                        return random3(p).r;
                        #else
                        return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123);
                        #endif
                    }

    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Get the position on the tile
        test:
            tile:
                defines:
                    v_pos: 'v_texcoord'
                blocks:
                    color: |
                        vec2 st = getTileCoords();
                        color.rg += fract(st*3.);
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    #ifndef v_pos
                    varying vec3 v_pos;
                    #endif

                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    lines-datastream:
        doc:
            author: 
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            version: 0.0.1
            tangram-version: 0.0.7
            licence: MIT
            description: |
                Apply some stream of random lines to your lines
        ui:
            shaders:
                defines:
                    DATASTREAM_SPEED:
                        type: number
                        label: Speed
                        range: 
                            min: 0.
                            max: 1000.
                            step: .5
                    DATASTREAM_ROADS:
                        type: number
                        label: 'Number of roads'
                        range: 
                            min: 0.
                            max: 10.
                            step: 1.
                    DATASTREAM_MARGIN:
                        type: number
                        label: 'Lines margins'
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DATASTREAM_AMOUNT:
                        type: number
                        label: Amount
                        range: 
                            min: 0.
                            max: 1.
                            step: 0.01
                    DATASTREAM_COLOR: 
                        type: color
                        label: Color
                    DATASTREAM_BACKGROUND_COLOR: 
                        type: color
                        label: 'Background color'

        base: lines
        mix: [generative-random]
        texcoords: true
        shaders:
            defines:
                DATASTREAM_SPEED: 20.0 
                DATASTREAM_ROADS: 1.0 
                DATASTREAM_MARGIN: 0.0 
                DATASTREAM_COLOR: vec3(0.000,0.000,0.500)
                DATASTREAM_BACKGROUND_COLOR: color.rgb
                DATASTREAM_AMOUNT: .3
            blocks:
                global: |
                    float datastream_pattern(vec2 st, float v, float t) {
                        float p = floor(st.y+v);
                        return step(t, (random(p*.000001)+random(p))*.5 );
                    }
                color: |
                    color.rgb = mix(DATASTREAM_BACKGROUND_COLOR,
                                    DATASTREAM_COLOR,
                                    datastream_pattern( v_texcoord.xy, 
                                                        u_time*(DATASTREAM_SPEED)*(-.5 * random(floor(v_texcoord.x*DATASTREAM_ROADS)) - .5), 
                                                        DATASTREAM_AMOUNT )* 
                                    (step(DATASTREAM_MARGIN,1.-fract(v_texcoord.x*DATASTREAM_ROADS))*
                                     step(DATASTREAM_MARGIN,fract(v_texcoord.x*DATASTREAM_ROADS))));